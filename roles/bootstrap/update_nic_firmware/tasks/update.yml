##
##   Copyright (c) 2020-2023 Intel Corporation.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##

# Usage: include this tasks file and pass vars listed below
# Variables:
#   interface_name: interface name of the PF (mandatory, string)
#   nic_module: NIC module controlling the PF (mandatory, string: "i40e" or "ice")
---
- name: install ethtool if missing
  include_role:
    name: install_dependencies

- name: get current FW version
  block:
    - name: get interface info
      command: ethtool -i {{ interface_name }}
      changed_when: false
      register: ethtool
    - name: set ethtool_drvinfo
      set_fact:
        ethtool_drvinfo: "{{ ethtool.stdout | from_yaml }}"
    - name: set fw_full_version
      set_fact:
        fw_full_version: "{{ ethtool_drvinfo['firmware-version'] }}"
    - name: set fw_short_version
      set_fact:
        fw_short_version: "{{ (fw_full_version.split(' ') | first) }}"
    # Only major.minor "mm" part are relevant because e.g. on E800 series FW shows as 2.00 on C0 (rev 02) and 2.02 on B0 (rev 01)
    - name: set fw_current_mm
      set_fact:
        fw_current_mm: "{{ fw_short_version }}"
    - name: set fw_min_req
      set_fact:
        fw_min_req: "{{ nvmupdate[nic_module].required_fw_version }}"
    - name: set fw_min_mm
      set_fact:
        fw_min_mm: "{{ fw_min_req }}"
    - debug:
        msg: "On {{ interface_name }} (driver {{ nic_module }}) the firmware version is {{ fw_full_version }}"

- name: check if current firmware version meets required version requirements
  set_fact:
    continue_nvmupdate: "{{ fw_current_mm is version_compare(fw_min_mm, '!=') }}"
    continue_nvmupdate_upgrade: "{{ fw_current_mm is version_compare(fw_min_mm, '<') }}"
    continue_nvmupdate_downgrade: "{{ fw_current_mm is version_compare(fw_min_mm, '>') }}"

- debug:
    msg: "The current firmware release on the card is {{ fw_current_mm }}. Required is {{ fw_min_mm }}"

- name: assert that current FW is not too old
  assert:
    that: fw_short_version is version_compare(nvmupdate[nic_module].min_updatable_fw_version, '>=')
    fail_msg: "Current firmware version {{ fw_short_version }} is too old to upgrade; it must be {{ nvmupdate[nic_module].min_updatable_fw_version }} or newer"
  when: continue_nvmupdate | bool

# download supported nvmupdate64e tool from required fw version
- name: download supported nvmupdate64e tool
  block:
    - name: download nvmupdate package for supported nvmupdate64e tool when downgrading fw
      get_url:
        url: "{{ nvmupdate[nic_module].supported_nvmupdate_tool_pkg_url }}"
        checksum: "{{ nvmupdate[nic_module].supported_nvmupdate_tool_pkg_checksum }}"
        dest: "{{ ansible_env.HOME }}/nvmupdate.tar.gz"
        mode: 0644
      register: ice_nvmupdate_tool
      until: ice_nvmupdate_tool is not failed
      retries: 5

    - name: create temporary directory when downgrading fw
      tempfile:
        state: directory
        prefix: nvmupdate_tool
      register: tempdir_nvmupdate_tool

    - name: unarchive nvmupdate package for supported nvmupdate64e tool when downgrading fw
      unarchive:
        src: "{{ ansible_env.HOME }}/nvmupdate.tar.gz"
        dest: "{{ tempdir_nvmupdate_tool.path }}"
        remote_src: yes
        extra_opts: [--strip-components=1] # to unpack Linux_x64 directly, skipping top-level model specific dir (e.g. 700Series)
        mode: 0755
  when:
    - continue_nvmupdate | bool
    - continue_nvmupdate_downgrade | bool

- name: download nvmupdate package
  get_url:
    url: "{{ nvmupdate[nic_module].nvmupdate_pkg_url }}"
    checksum: "{{ nvmupdate[nic_module].nvmupdate_pkg_checksum }}"
    dest: "{{ ansible_env.HOME }}/nvmupdate.tar.gz"
    mode: 0644
  register: nvmupdate_download
  until: nvmupdate_download is not failed
  retries: 5
  when: continue_nvmupdate | bool

- name: create temporary directory
  tempfile:
    state: directory
    prefix: nvmupdate
  register: tempdir_nvmupdate
  when: continue_nvmupdate | bool

- name: unarchive nvmupdate package
  unarchive:
    src: "{{ ansible_env.HOME }}/nvmupdate.tar.gz"
    dest: "{{ tempdir_nvmupdate.path }}"
    remote_src: yes
    extra_opts: [--strip-components=1] # to unpack Linux_x64 directly, skipping top-level model specific dir (e.g. 700Series)
    mode: 0755
  when: continue_nvmupdate | bool

# downgrade fw block to remove and add nvmupdate64e tool
- name: delete nvmupdate64e tool form exiting package when downgrading fw
  block:
    - name: remove files
      file:
        path: "{{ tempdir_nvmupdate.path }}/Linux_x64/nvmupdate64e"
        state: absent
      changed_when: true

    - name: copy nvmupdate64e tool from supported package when downgrading fw
      copy:
        src: "{{ tempdir_nvmupdate_tool.path }}/Linux_x64/nvmupdate64e"
        dest: "{{ tempdir_nvmupdate.path }}/Linux_x64/nvmupdate64e"
        mode: 0755
        remote_src: yes
  when:
    - continue_nvmupdate | bool
    - continue_nvmupdate_downgrade | bool

# get device MAC address - this allows to run nvmupdate for the requested device only
- debug: var=ansible_facts[interface_name]['macaddress']
  when: continue_nvmupdate | bool

- name: check ip routing table for interface {{ interface_name }}
  command: ip route list
  register: ip_route
  when: continue_nvmupdate | bool
  changed_when: true

- debug:
    msg: "interface {{ interface_name }} (driver {{ nic_module }}) is not active in ip route list"
  when:
    - continue_nvmupdate | bool
    - 'interface_name not in ip_route.stdout'

- debug:
    msg: "interface {{ interface_name }} (driver {{ nic_module }}) is active in ip route list, will remove interface {{ interface_name }} from list"
  when:
    - continue_nvmupdate | bool
    - 'interface_name in ip_route.stdout'

- name: interface {{ interface_name }} was found active, grep interface before removing it
  shell: "set -o pipefail && ip route list | grep {{ interface_name }}"
  args:
    executable: /bin/bash
  register: grep_interface
  changed_when: true
  when:
    - continue_nvmupdate | bool
    - 'interface_name in ip_route.stdout'

- debug:
    var: grep_interface.stdout_lines
  when:
    - continue_nvmupdate | bool
    - 'interface_name in ip_route.stdout'

- name: remove interface {{ interface_name }} from routing table and proceed to firmware upgrade / downgrade
  command: "ip route del {{ item }}"
  with_items: "{{ grep_interface.stdout_lines }}"
  changed_when: true
  when:
    - continue_nvmupdate | bool
    - 'interface_name in ip_route.stdout'

- debug:
    msg: >-
      upgrading / downgrading firmware... This operation may take several minutes.
      To avoid damage to your device, do not stop the update or
      reboot or power off the system during this process!
  when: continue_nvmupdate | bool

- name: upgrade / downgrade firmware
# noqa command-instead-of-shell - shell is used intentionally here
  shell:
    cmd: "./nvmupdate64e -u -l -o update.xml -b -c nvmupdate.cfg -m '{{ ansible_facts[interface_name]['macaddress'] | replace(':','') }}'"
  args:
    chdir: "{{ tempdir_nvmupdate.path }}/Linux_x64"
    executable: /bin/bash
  register: nvmupdate_result
  when: continue_nvmupdate | bool
  changed_when: true
  failed_when: false

- name: show additional message on unsupported platforms
  debug:
    msg: >
      Failed to upgrade / downgrade on interface {{ interface_name }} (driver {{ nic_module }}).
      This is probably caused by unsupported platform - contact your vendor for more information.
  when:
    - continue_nvmupdate | bool
    - (nvmupdate_result.stdout is search('No devices to update.'))

- name: fail if fw upgrade / downgrade failed
  fail:
    msg: "Failed to upgrade / downgrade firmware on interface {{ interface_name }} (driver {{ nic_module }}). Error: {{ nvmupdate_result.stdout }}"
  when:
    - continue_nvmupdate | bool
    - continue_nvmupdate_upgrade | bool
    - (nvmupdate_result.stdout is not search('update successful'))

- name: ensure that temporary files are deleted when downgrading fw
  file:
    state: absent
    path: "{{ tempdir_nvmupdate_tool.path }}"
  when:
    - continue_nvmupdate_downgrade | bool
    - continue_nvmupdate | bool

- name: ensure that temporary files are deleted when upgrading fw
  file:
    state: absent
    path: "{{ tempdir_nvmupdate.path }}"
  when:
    - continue_nvmupdate_upgrade | bool
    - continue_nvmupdate | bool

- name: reboot after upgrade / downgrade
# noqa no-handler - more than one condition here, so can't be a handler
  reboot:
    reboot_timeout: 1200 # wait up to 20 minutes - if reboot takes longer after NVM upgrade / downgrade
  when: continue_nvmupdate | bool
